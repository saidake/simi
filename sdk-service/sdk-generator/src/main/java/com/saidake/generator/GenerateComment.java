package com.saidake.generator;

import com.saidake.common.core.util.file.FileUtil;
import lombok.AllArgsConstructor;
import lombok.Cleanup;
import lombok.Data;
import lombok.experimental.UtilityClass;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.IntStream;

@Slf4j
@UtilityClass
public class GenerateComment {
    private static final Boolean isOutputDashboard = true;
    private static final Boolean isAllFunctionGenerate = false;
    private static final String TARGET_FILE_PATH = "D:\\Desktop\\DevProject\\saidake-manage-project\\sdk-service\\sdk-generator\\src\\test\\java\\com\\saidake\\MainTest.java";
    private static final String FUNCTION_MATCH = "test(String[], String)";

    private static final String TEMP_FOLDER = "sdk-temp";
    private static final String DASHBOARD_FUNCTION_PREFIX = " * ";
    private static final String SUMMARY_TITLE = "Function summary (generated by saidake-manage-project):";

    // 本质为对函数所在行的改造
    public static void main(String[] args) throws IOException {
        //A. 定义公共数据
        String projectRootPath = System.getProperty("user.dir");
        String blackboard = FileUtil.joinPath(projectRootPath, "sdk-service/sdk-generator/src/main/java/com/saidake/generator/blackboard.txt");
        File targetFile = new File(TARGET_FILE_PATH);
        File file = new File(FileUtils.getTempDirectory(), TEMP_FOLDER);
        FileUtils.copyFileToDirectory(targetFile, file);
        File tempReadFile = new File(FileUtils.getTempDirectory(), TEMP_FOLDER + File.separator + targetFile.getName());
        String FUNCTION_NAME = FUNCTION_MATCH.replaceAll("\\(.*?\\)", "");
        log.info("copy to tempFile: {}", tempReadFile.getPath());

        //A. 定义正则匹配规则
        Pattern commentStartCheckPattern = Pattern.compile("^\\s*/\\*\\*\\s*$");
        Pattern commentFunctionSummaryStartCheckPattern = Pattern.compile(String.format("^\\s\\*\\s*%s\\s*$", SUMMARY_TITLE));
        Pattern commentFunctionSummaryEndCheckPattern = Pattern.compile("^\\s*\\*\\s*$");
        Pattern functionStartPattern = Pattern.compile(String.format("^[^\"]+(public|private|protected)\\s*(static)?\\s*(([A-z]+)|([A-z]+.*?>))\\s*%s\\s*", FUNCTION_NAME));
        Pattern anyFunctionStartPattern = Pattern.compile("^[^\"]+(public|private|protected)\\s*(static)?\\s*(([A-z]+)|([A-z]+.*?>))\\s*[A-z1-9]+\\s*\\(");
        Pattern functionNameCheckPattern = Pattern.compile("[A-z1-9]+");
        Pattern functionNameCheckPattern2 = Pattern.compile("[A-z1-9]+\\(.*?\\)");
        Pattern commentNumberPattern = Pattern.compile("^\\s*//[A-Z]\\.\\s.*?");  //支持1-4
        Pattern ifPattern = Pattern.compile("^\\s*?if\\s*?(.*?)\\s*?\\{\\s*?");  //支持1-4
        Pattern switchPattern = Pattern.compile("^\\s*?switch\\s*?(.*?)\\s*?\\{\\s*?");  //支持1-4
        Pattern ifElsePattern = Pattern.compile("^\\s*?}\\s*?else\\s*?\\{\\s*?");  //支持1-4
        Pattern switchCasePattern = Pattern.compile("^\\s*?case\\s*?[A-z1-9\".]+\\s*?:\\s*?");  //支持1-4
        Pattern switchCaseContentPattern = Pattern.compile("(?<=case)\\s*?[A-z1-9.\"]+\\s*?(?=:)");  /**  */
        Pattern switchDefaultPattern = Pattern.compile("^\\s*?default\\s*?:\\s*?");  /**  */

        //A. 检测functionName是否准确
        boolean functionNameCheckResult1 = functionNameCheckPattern.matcher(FUNCTION_MATCH).find();
        boolean isParamFunctionName = functionNameCheckPattern2.matcher(FUNCTION_MATCH).find();
        if (!functionNameCheckResult1 && !isParamFunctionName) {
            throw new RuntimeException("error function name: " + FUNCTION_MATCH);
        }

        //A. 定义 全局公共数据
        String[] paramList = StringUtils.splitByWholeSeparator(FUNCTION_MATCH.replaceAll("(.*\\()|\\)|\\s", ""), ",");
        @Cleanup BufferedWriter targetFileWriter = null;
        List<CommentEntry> commentStorage = new ArrayList<>();
        boolean isCommentStart = false;
        boolean isFunctionSummaryStart = false;
        boolean isMarkedReadFile = false;
        boolean isResetFromFunctionEnd = false;
        boolean isResetFromParamListEnd = false;
        int currentLineNumber = 0;

        //A. 定义 函数检测相关
        boolean isSearchFunction = false;
        boolean isFunctionParamsEnd = false;
        boolean isEnteredFunctionParamList = false;
        boolean isEnteredFunction = false;
        boolean isEnteredFunctionSecond = false;
        int leftCount = 0;          //  { 的个数
        int rightCount = 0;         //  } 的个数
        int tempLeftCount = 0;          //  if或switch { 的个数
        int tempRightCount = 0;         //  if或switch { 的个数
        boolean isIfStart = false;
        boolean isSwitchStart = false;
        boolean isIfStartComment = false;
        boolean isSwitchStartComment = false;
        String functionFirstLine=null;
        LinkedList<Integer> ifLevelList = new LinkedList<>();
        LinkedList<Integer> switchLevelList = new LinkedList<>();
        List<String> functionParamList = new ArrayList<>();
        @Cleanup BufferedReader tempReadFileReader = new BufferedReader(new FileReader(tempReadFile));
        @Cleanup BufferedWriter blackboardWriter = new BufferedWriter(new FileWriter(blackboard));
        if (!isOutputDashboard) targetFileWriter = new BufferedWriter(new FileWriter(targetFile));
        //A. 读取文件
        //A. 开始读取临时文件
        for (String currentLine = tempReadFileReader.readLine(); currentLine != null; currentLine = tempReadFileReader.readLine()) {
            currentLineNumber++;
            //if(isResetFromParamListEnd) System.out.println("isResetFromParamListEnd currentLine: "+currentLine);
            String checkCurrentLine = currentLine.replaceAll("\".*?\"", "");
            //B. 函数之前的注释检查
            if (commentStartCheckPattern.matcher(currentLine).find()) {
                isCommentStart = true;
            }
            //B. 函数之前的Function Summary检查
            if (isCommentStart & commentFunctionSummaryStartCheckPattern.matcher(currentLine).find()) {
                isFunctionSummaryStart = true;
            }
            //B. 已经进入函数内部了
            if (isEnteredFunction) {
                isEnteredFunctionSecond = true;
            }

            //B. 提前标记函数行，并且还没有被reset过
            boolean isFunctionStartLine = functionStartPattern.matcher(currentLine).find();
            if(isFunctionStartLine)functionFirstLine=currentLine;
            //B. reset过来后就不需要标记了，碰到当前函数后一定要标记
            if (isFunctionStartLine && !isOutputDashboard && !isResetFromFunctionEnd) {
                log.info("mark line: {}", currentLine);
                tempReadFileReader.mark((int) tempReadFile.length() + 1);
                isMarkedReadFile = true;
            }

            //B. 遇到其他函数，直接将注释标记至为false
            if (!isFunctionStartLine && anyFunctionStartPattern.matcher(checkCurrentLine).find()) {
                isCommentStart = false;
            }

            //B. 找到目标函数了（首行通过，但是没有{，继续检测），没有reset时才需要检测
            if ((isFunctionStartLine || isEnteredFunctionParamList) && (isOutputDashboard || isMarkedReadFile)) {
                isEnteredFunctionParamList = true;
                log.info("check function line: {}", currentLine);
                //C. isFunctionParamsEnd检测 )，isEnteredFunctionParamList检测 {
                if (!isFunctionParamsEnd && isParamFunctionName) {
                    String[] currentParamList = StringUtils.splitByWholeSeparator(currentLine.replaceAll("(.*\\()|\\)|\\{|(^,)|(,$)|(throws.*)", ""), ",");
                    for (String currentParam : currentParamList) {
                        if (StringUtils.isNotBlank(currentParam)) {
                            functionParamList.add(currentParam.trim().replaceAll("\\s+.*$", ""));
                        }
                    }
                }
                if (checkCurrentLine.contains(")")) isFunctionParamsEnd = true;
                if (checkCurrentLine.contains("{")) {
                    isEnteredFunctionParamList = false;
                    isFunctionParamsEnd = false;
                    if (functionParamList.size() == paramList.length && IntStream.range(0, paramList.length).allMatch(i -> functionParamList.get(i).equals(paramList[i])) || !isParamFunctionName) {
                        leftCount += 1;
                        isEnteredFunction = true;
                        isSearchFunction = true;
                        log.info("passed param list check: {}", isParamFunctionName ? functionParamList : "empty");
                        functionParamList.clear();
                    } else {
                        leftCount = 0;
                        isEnteredFunction = false;
                        isEnteredFunctionSecond = false;
                        isSearchFunction = false;
                        log.info("isn't target function");
                        //E. reset上去
                        tempReadFileReader.reset();
                        //F. 写入首行
                        isResetFromParamListEnd = true;
                        isMarkedReadFile=false;
                        functionParamList.clear();
                        continue;
                    }
                }
            }

            //B. 已经进入函数内部，mark后才需要进入
            if (isEnteredFunctionSecond && isSearchFunction && isOutputDashboard
                    || isEnteredFunctionSecond && isSearchFunction && !isOutputDashboard && isMarkedReadFile
            ) {
                Matcher ifMatcher = ifPattern.matcher(currentLine);
                Matcher switchMatcher = switchPattern.matcher(currentLine);
                Matcher ifElseMatcher = ifElsePattern.matcher(currentLine);
                Matcher switchCaseMatcher = switchCasePattern.matcher(currentLine);
                Matcher switchDefaultMatcher = switchDefaultPattern.matcher(currentLine);

                //C. 检测语句
                if (ifMatcher.find() && isIfStartComment) isIfStart = true;
                if (switchMatcher.find() && isSwitchStartComment) isSwitchStart = true;

                //C. 去掉字符串
                Matcher commentNumberMatcher = commentNumberPattern.matcher(checkCurrentLine);
                if (commentNumberMatcher.find()) {
                    int currentCommentNumber = (int) commentNumberMatcher.group(0).replaceAll("[^A-Z]", "").charAt(0) - 64;  // 从1开始
                    String currentCommentContent = checkCurrentLine.replaceAll("^\\s*//[A-Z]\\.\\s.*?", "").trim();
                    if (currentCommentContent.startsWith("IF(")) {
                        isIfStartComment = true;
                        ifLevelList.add(currentCommentNumber);
                    }
                    if (currentCommentContent.startsWith("SWITCH:")) {
                        isSwitchStartComment = true;
                        switchLevelList.add(currentCommentNumber);
                    }
                    commentStorage.add(new CommentEntry(currentCommentNumber, currentCommentContent));
                }
                int currentLeftCount = checkCurrentLine.length() - checkCurrentLine.replaceAll("\\{", "").length();
                int currentRightCount = checkCurrentLine.length() - checkCurrentLine.replaceAll("}", "").length();
                leftCount += currentLeftCount;
                rightCount += currentRightCount;
                if (isIfStart || isSwitchStart) {
                    tempLeftCount += currentLeftCount;
                    tempRightCount += currentRightCount;
                }

                //C. 进入内部
                if (tempLeftCount + 1 > tempRightCount) {
                    if (isIfStart && ifElseMatcher.find()) {
                        commentStorage.add(new CommentEntry(ifLevelList.removeLast(), "ELSE"));
                    } else if (isSwitchStart && switchCaseMatcher.find()) {
                        Matcher matcher = switchCaseContentPattern.matcher(currentLine);
                        if (matcher.find()) {
                            String group = matcher.group(0);
                            if (group != null) {
                                commentStorage.add(new CommentEntry(switchLevelList.getLast(), "SWITCH(" + group.trim() + ")"));
                            }
                        }
                    } else if (isSwitchStart && switchDefaultMatcher.find()) {
                        commentStorage.add(new CommentEntry(switchLevelList.removeLast(), "SWITCH(DEFAULT)"));
                    }
                } else if (tempLeftCount + 1 == tempRightCount) {
                    isIfStart = false;
                    isSwitchStart = false;
                    isSwitchStartComment = false;
                    isIfStartComment = false;
                }
                //C. 到达函数底部
//                    log.info("currentLine: {}, rightCount: {}, leftCount: {}, currentLeftCount: {}, currentRightCount",currentLine,rightCount,leftCount,currentLeftCount,currentRightCount);
                if (rightCount - leftCount >= 0) {
                    log.info("reached the bottom of the function: {}", currentLineNumber);
                    //D. 清理 函数检测相关
                    isSearchFunction = false;
                    isFunctionParamsEnd = false;
                    isEnteredFunctionParamList = false;
                    isEnteredFunction = false;
                    isEnteredFunctionSecond = false;
                    leftCount = 0;          //  { 的个数
                    rightCount = 0;         //  } 的个数
                    tempLeftCount = 0;          //  if或switch { 的个数
                    tempRightCount = 0;         //  if或switch { 的个数
                    isIfStart = false;
                    isSwitchStart = false;
                    isIfStartComment = false;
                    isSwitchStartComment = false;
                    ifLevelList.clear();
                    switchLevelList.clear();
                    //functionParamList.clear(); 提前清理过了
                    //D. 检测是否输出到黑板
                    if (isOutputDashboard) {
                        blackboardWriter.write(DASHBOARD_FUNCTION_PREFIX + SUMMARY_TITLE + System.lineSeparator());
                        for (int i = 0; i < commentStorage.size() - 1; i++) {
                            CommentEntry item = commentStorage.get(i);
                            blackboardWriter.write(DASHBOARD_FUNCTION_PREFIX + StringUtils.repeat("    ", item.getLevel()) + item.getContent() + System.lineSeparator());
                        }
                        CommentEntry lastEntry = commentStorage.get(commentStorage.size() - 1);
                        blackboardWriter.write(DASHBOARD_FUNCTION_PREFIX + StringUtils.repeat("    ", lastEntry.getLevel()) + lastEntry.getContent());
                        return;
                    } else {
                        //E. 第一次没有reset时，reset上去
                        if (!isResetFromFunctionEnd && isMarkedReadFile) {
                            log.info("reset line number: {}",currentLineNumber);
                            tempReadFileReader.reset();
                            //F. 写入首行
//                            targetFileWriter.write(currentLine + System.lineSeparator());
                            isResetFromFunctionEnd = true;
                            isMarkedReadFile=false;
                            continue;
                        }
                    }
                }
            }

            //B. 刚刚reset过来，给没有注释的函数添加注释
            if (!isOutputDashboard && isResetFromFunctionEnd && !isCommentStart) {
                isResetFromFunctionEnd = false;
                log.info("functionParamList: {}",functionParamList);
                String currentFunctionBlankPrefix = functionFirstLine.replaceAll("[A-z].*$", "");
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append(currentFunctionBlankPrefix+"/**");
                stringBuilder.append(System.lineSeparator());
                stringBuilder.append(currentFunctionBlankPrefix+" * "+FUNCTION_NAME);
                stringBuilder.append(System.lineSeparator());
                stringBuilder.append(currentFunctionBlankPrefix+" * ");
                stringBuilder.append(System.lineSeparator());
                stringBuilder.append(currentFunctionBlankPrefix+" */");
                stringBuilder.append(System.lineSeparator());
                stringBuilder.append(functionFirstLine);
                stringBuilder.append(System.lineSeparator());
                stringBuilder.append(currentLine);
                stringBuilder.append(System.lineSeparator());
                targetFileWriter.write(stringBuilder.toString());
            } else if (!isOutputDashboard && isResetFromParamListEnd) {
                targetFileWriter.write(functionFirstLine + System.lineSeparator());
                targetFileWriter.write(currentLine + System.lineSeparator());
                isResetFromParamListEnd=false;
            } else if (!isOutputDashboard && !isMarkedReadFile) {
                targetFileWriter.write(currentLine + System.lineSeparator());
            }
        }
        log.info("write ended");

    }

    @Data
    @AllArgsConstructor
    private static class CommentEntry {
        private Integer level;
        private String content;
    }

}
